{"version":3,"file":"index.es.js","sources":["../src/utility/element.ts","../src/utility/input.ts","../src/utility/prosemirror.ts","../src/utility/toggle.ts","../src/item.ts","../src/button-manager/calc-button-pos.ts","../src/button-manager/style.ts","../src/button-manager/create-tooltip.ts","../src/button-manager/no-active.ts","../src/button-manager/filter-button.ts","../src/button-manager/index.ts","../src/input-manager/calc-input-pos.ts","../src/input-manager/style.ts","../src/input-manager/create-input.ts","../src/input-manager/filter-input.ts","../src/input-manager/index.ts","../src/selection-marks-tooltip.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nexport const elementIsTag = (element: HTMLElement, tagName: string): boolean =>\n    element.tagName === tagName.toUpperCase();\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx, Ctx } from '@milkdown/core';\nimport { ModifyInlineMath } from '@milkdown/plugin-math';\nimport { ModifyImage, ModifyLink } from '@milkdown/preset-gfm';\nimport { findSelectedNodeOfType, Node as ProseNode } from '@milkdown/prose';\n\nimport { Event2Command, Updater } from '../item';\nimport { elementIsTag } from './element';\n\nexport const modifyLink =\n    (ctx: Ctx): Event2Command =>\n    (e) => {\n        const { target } = e;\n        if (!(target instanceof HTMLElement)) {\n            return () => true;\n        }\n        if (elementIsTag(target, 'input')) {\n            target.focus();\n            return () => false;\n        }\n        const parent = target.parentNode;\n        if (!parent) return () => false;\n\n        const inputEl = Array.from(parent.children).find((el) => el.tagName === 'INPUT');\n        if (!(inputEl instanceof HTMLInputElement)) return () => false;\n\n        return ctx.get(commandsCtx).call(ModifyLink, inputEl.value);\n    };\n\nexport const modifyInlineMath =\n    (ctx: Ctx): Event2Command =>\n    (e) => {\n        const { target } = e;\n        if (!(target instanceof HTMLElement)) {\n            return () => true;\n        }\n        const parent = target.parentNode;\n        if (!parent) return () => false;\n\n        const inputEl = Array.from(parent.children).find((el) => el.tagName === 'INPUT');\n        if (!(inputEl instanceof HTMLInputElement)) return () => false;\n\n        return ctx.get(commandsCtx).call(ModifyInlineMath, inputEl.value);\n    };\n\nexport const modifyImage =\n    (ctx: Ctx): Event2Command =>\n    (e) => {\n        const { target } = e;\n        if (!(target instanceof HTMLElement)) {\n            return () => true;\n        }\n        if (elementIsTag(target, 'input')) {\n            target.focus();\n            return () => false;\n        }\n        const parent = target.parentNode;\n        if (!parent) return () => false;\n\n        const inputEl = Array.from(parent.children).find((el) => el.tagName === 'INPUT');\n        if (!(inputEl instanceof HTMLInputElement)) return () => false;\n\n        return ctx.get(commandsCtx).call(ModifyImage, inputEl.value);\n    };\n\nexport const updateLinkView: Updater = (view, $) => {\n    const { marks } = view.state.schema;\n    const { firstChild, lastElementChild } = $;\n    if (!(firstChild instanceof HTMLInputElement) || !(lastElementChild instanceof HTMLButtonElement)) return;\n\n    const { selection } = view.state;\n    let node: ProseNode | undefined;\n    view.state.doc.nodesBetween(selection.from, selection.to, (n) => {\n        if (marks.link.isInSet(n.marks)) {\n            node = n;\n            return false;\n        }\n        return;\n    });\n    if (!node) return;\n\n    const mark = node.marks.find((m) => m.type === marks.link);\n    if (!mark) return;\n\n    const value = mark.attrs.href;\n    firstChild.value = value;\n    if (!value) {\n        lastElementChild.classList.add('disable');\n        return;\n    }\n    if (lastElementChild.classList.contains('disable')) {\n        lastElementChild.classList.remove('disable');\n    }\n};\n\nexport const updateInlineMathView: Updater = (view, $) => {\n    const { nodes } = view.state.schema;\n    const { firstChild, lastElementChild } = $;\n    if (!(firstChild instanceof HTMLInputElement) || !(lastElementChild instanceof HTMLButtonElement)) return;\n\n    const result = findSelectedNodeOfType(view.state.selection, nodes.math_inline);\n    if (!result) return;\n    const { node } = result;\n\n    const value = node.attrs.value;\n    firstChild.value = value;\n    if (!value) {\n        lastElementChild.classList.add('disable');\n        return;\n    }\n    if (lastElementChild.classList.contains('disable')) {\n        lastElementChild.classList.remove('disable');\n    }\n};\n\nexport const updateImageView: Updater = (view, $) => {\n    const { nodes } = view.state.schema;\n    const { firstChild, lastElementChild } = $;\n    if (!(firstChild instanceof HTMLInputElement) || !(lastElementChild instanceof HTMLButtonElement)) return;\n\n    const result = findSelectedNodeOfType(view.state.selection, nodes.image);\n    if (!result) return;\n    const { node } = result;\n\n    const value = node.attrs.src;\n    firstChild.value = value;\n    if (!value) {\n        lastElementChild.classList.add('disable');\n        return;\n    }\n    if (lastElementChild.classList.contains('disable')) {\n        lastElementChild.classList.remove('disable');\n    }\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { EditorState, findParentNode, MarkType, Node, NodeType, TextSelection } from '@milkdown/prose';\n\nexport type Position = {\n    start: number;\n    end: number;\n};\n\nexport const hasMark = (editorState: EditorState, type: MarkType): boolean => {\n    const { from, to } = editorState.selection;\n\n    return editorState.doc.rangeHasMark(from, from === to ? to + 1 : to, type);\n};\n\nexport const isTextSelection = (editorState: EditorState): boolean => {\n    const { selection } = editorState;\n    if (selection instanceof TextSelection) {\n        const text = editorState.doc.textBetween(selection.from, selection.to);\n\n        if (!text) return false;\n\n        return true;\n    }\n    return false;\n};\n\nexport const isInCodeFence = (editorState: EditorState): boolean =>\n    Boolean(findParentNode((node) => !!node.type.spec.code)(editorState.selection));\n\nexport const isTextAndNotHasMark = (editorState: EditorState, mark: MarkType): boolean =>\n    !isTextSelection(editorState) || isInCodeFence(editorState) || hasMark(editorState, mark);\n\nexport const equalNodeType = (nodeType: NodeType, node: Node) => {\n    return (Array.isArray(nodeType) && nodeType.indexOf(node.type) > -1) || node.type === nodeType;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { CmdKey, commandsCtx, Ctx, themeToolCtx } from '@milkdown/core';\nimport type { Icon } from '@milkdown/design-system';\nimport type { MarkType } from '@milkdown/prose';\n\nimport type { ButtonItem } from '../item';\nimport { hasMark, isTextAndNotHasMark } from './prosemirror';\n\nexport const createToggleIcon = <T>(\n    ctx: Ctx,\n    iconName: Icon,\n    commandKey: CmdKey<T>,\n    mark: MarkType,\n    disableForMark: MarkType,\n): ButtonItem => ({\n    $: ctx.get(themeToolCtx).slots.icon(iconName),\n    command: () => ctx.get(commandsCtx).call(commandKey),\n    active: (view) => hasMark(view.state, mark),\n    disable: (view) => isTextAndNotHasMark(view.state, disableForMark),\n    enable: (view) => !!mark && !!view.state.schema.marks[mark.name],\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Ctx } from '@milkdown/core';\nimport { ToggleBold, ToggleInlineCode, ToggleItalic, ToggleLink, ToggleStrikeThrough } from '@milkdown/preset-gfm';\nimport { EditorView, findSelectedNodeOfType, Schema, TextSelection } from '@milkdown/prose';\n\nimport {\n    createToggleIcon,\n    hasMark,\n    modifyImage,\n    modifyInlineMath,\n    modifyLink,\n    updateImageView,\n    updateInlineMathView,\n    updateLinkView,\n} from './utility';\n\nexport type Pred = (view: EditorView) => boolean;\nexport type Updater = (view: EditorView, $: HTMLElement) => void;\nexport type Event2Command = (e: Event) => void;\n\nexport type ButtonItem = {\n    $: HTMLElement;\n    command: () => void;\n    active: Pred;\n    disable?: Pred;\n    enable: Pred;\n};\n\nexport type InputItem = {\n    command: Event2Command;\n    display: Pred;\n    update: Updater;\n    placeholder: string;\n} & (\n    | {\n          bind: true;\n      }\n    | {\n          bind?: false;\n          buttonText: string;\n      }\n);\n\nexport enum ButtonAction {\n    ToggleBold,\n    ToggleItalic,\n    ToggleStrike,\n    ToggleCode,\n    ToggleLink,\n}\n\nexport enum InputAction {\n    ModifyLink,\n    ModifyImage,\n    ModifyInlineMath,\n}\n\nexport type ButtonMap = Record<ButtonAction, ButtonItem>;\nexport type InputMap = Record<InputAction, InputItem>;\n\nexport type InputOptions = {\n    link: {\n        placeholder: string;\n        buttonText: string;\n    };\n    image: {\n        placeholder: string;\n        buttonText: string;\n    };\n    inlineMath: {\n        placeholder: string;\n    };\n};\n\nexport const inputMap = (schema: Schema, ctx: Ctx, inputOptions: InputOptions): InputMap => {\n    const { marks, nodes } = schema;\n    return {\n        [InputAction.ModifyLink]: {\n            display: (view) =>\n                view.state.selection.empty &&\n                view.state.selection instanceof TextSelection &&\n                hasMark(view.state, marks.link),\n            command: modifyLink(ctx),\n            update: updateLinkView,\n            ...inputOptions.link,\n        },\n        [InputAction.ModifyInlineMath]: {\n            display: (view) => Boolean(findSelectedNodeOfType(view.state.selection, nodes.math_inline)),\n            command: modifyInlineMath(ctx),\n            update: updateInlineMathView,\n            bind: true,\n            ...inputOptions.inlineMath,\n        },\n        [InputAction.ModifyImage]: {\n            display: (view) => Boolean(findSelectedNodeOfType(view.state.selection, nodes.image)),\n            command: modifyImage(ctx),\n            update: updateImageView,\n            ...inputOptions.image,\n        },\n    };\n};\n\nexport const buttonMap = (schema: Schema, ctx: Ctx): ButtonMap => {\n    const { marks } = schema;\n    return {\n        [ButtonAction.ToggleBold]: createToggleIcon(ctx, 'bold', ToggleBold, marks.strong, marks.code_inline),\n        [ButtonAction.ToggleItalic]: createToggleIcon(ctx, 'italic', ToggleItalic, marks.em, marks.code_inline),\n        [ButtonAction.ToggleStrike]: createToggleIcon(\n            ctx,\n            'strikeThrough',\n            ToggleStrikeThrough,\n            marks.strike_through,\n            marks.code_inline,\n        ),\n        [ButtonAction.ToggleCode]: createToggleIcon(ctx, 'code', ToggleInlineCode, marks.code_inline, marks.link),\n        [ButtonAction.ToggleLink]: createToggleIcon(ctx, 'link', ToggleLink, marks.link, marks.code_inline),\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { calculateTextPosition, EditorView } from '@milkdown/prose';\n\nexport const calcButtonPos = (buttons: HTMLElement, view: EditorView) => {\n    buttons.classList.remove('hide');\n    calculateTextPosition(view, buttons, (start, end, target, parent) => {\n        const $editor = buttons.parentElement;\n        if (!$editor) {\n            throw new Error();\n        }\n        const selectionWidth = end.left - start.left;\n        let left = start.left - parent.left - (target.width - selectionWidth) / 2;\n        let top = start.top - parent.top - target.height - 14 + $editor.scrollTop;\n\n        if (left < 0) left = 0;\n\n        if (start.top < target.height) {\n            top = start.bottom - parent.top + 14 + $editor.scrollTop;\n        }\n\n        return [top, left];\n    });\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { css } from '@emotion/css';\nimport { ThemeTool } from '@milkdown/core';\n\nexport const injectStyle = (themeTool: ThemeTool) => {\n    const { palette, mixin, size } = themeTool;\n    return css`\n        display: inline-flex;\n        cursor: pointer;\n        justify-content: space-evenly;\n        position: absolute;\n        border-radius: ${size.radius};\n        z-index: 2;\n\n        ${mixin.border?.()};\n        ${mixin.shadow?.()};\n\n        overflow: hidden;\n        background: ${palette('surface')};\n\n        .icon {\n            position: relative;\n            color: ${palette('solid', 0.87)};\n\n            width: 3rem;\n            line-height: 3rem;\n            text-align: center;\n            transition: all 0.4s ease-in-out;\n            &:hover {\n                background-color: ${palette('secondary', 0.12)};\n            }\n            &.active {\n                color: ${palette('primary')};\n            }\n            &:not(:last-child)::after {\n                content: '';\n                position: absolute;\n                top: 0;\n                right: calc(-0.5 * ${size.lineWidth});\n                width: ${size.lineWidth};\n                bottom: 0;\n                background: ${palette('line')};\n            }\n        }\n        &.hide,\n        .hide {\n            display: none;\n        }\n    `;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { EditorView } from '@milkdown/prose';\nimport type { Utils } from '@milkdown/utils';\n\nimport type { ButtonMap } from '../item';\nimport { injectStyle } from './style';\n\ntype Tooltip = {\n    dom: HTMLDivElement;\n    render: (editorView: EditorView) => void;\n};\n\nexport const createTooltip = (buttonMap: ButtonMap, utils: Utils): Tooltip => {\n    const div = document.createElement('div');\n    const style = utils.getStyle(injectStyle) || '';\n    if (style) {\n        div.classList.add(style);\n    }\n\n    div.classList.add('tooltip');\n\n    return {\n        dom: div,\n        render: (editorView: EditorView) => {\n            Object.values(buttonMap)\n                .filter((item) => item.enable(editorView))\n                .forEach(({ $ }) => div.appendChild($));\n\n            editorView.dom.parentNode?.appendChild(div);\n        },\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { EditorView } from '@milkdown/prose';\n\nimport { ButtonMap } from '../item';\n\nexport const noActive = (buttonMap: ButtonMap, view: EditorView) => {\n    return Object.values(buttonMap)\n        .filter((item) => item.enable(view))\n        .every(({ $ }) => $.classList.contains('hide'));\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { EditorView } from '@milkdown/prose';\n\nimport { ButtonMap } from '../item';\nimport { noActive } from './no-active';\n\nexport const filterButton = (buttonMap: ButtonMap, view: EditorView) => {\n    Object.values(buttonMap)\n        .filter((item) => item.enable(view))\n        .forEach((item) => {\n            const disable = item.disable?.(view);\n            if (disable) {\n                item.$.classList.add('hide');\n                return;\n            }\n\n            item.$.classList.remove('hide');\n\n            const active = item.active(view);\n            if (active) {\n                item.$.classList.add('active');\n                return;\n            }\n            item.$.classList.remove('active');\n        });\n\n    return noActive(buttonMap, view);\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { EditorView } from '@milkdown/prose';\nimport type { Utils } from '@milkdown/utils';\n\nimport type { ButtonMap } from '../item';\nimport { calcButtonPos } from './calc-button-pos';\nimport { createTooltip } from './create-tooltip';\nimport { filterButton } from './filter-button';\n\nexport const createButtonManager = (buttonMap: ButtonMap, utils: Utils) => {\n    const { dom: buttons, render } = createTooltip(buttonMap, utils);\n\n    const onClick = (e: Event) => {\n        const target = Object.values(buttonMap).find(({ $ }) => e.target instanceof Element && $.contains(e.target));\n        if (!target) return;\n\n        e.stopPropagation();\n        e.preventDefault();\n        target.command();\n    };\n\n    const hide = () => {\n        buttons.classList.add('hide');\n    };\n\n    buttons.addEventListener('mousedown', onClick);\n\n    return {\n        destroy: () => {\n            buttons.removeEventListener('mousedown', onClick);\n            buttons.remove();\n        },\n        hide,\n        update: (editorView: EditorView) => {\n            const noActive = filterButton(buttonMap, editorView);\n            if (noActive) {\n                hide();\n                return;\n            }\n            calcButtonPos(buttons, editorView);\n        },\n        render,\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { calculateTextPosition, EditorView } from '@milkdown/prose';\n\nexport const calcInputPos = (view: EditorView, input: HTMLDivElement) => {\n    calculateTextPosition(view, input, (start, end, target, parent) => {\n        const $editor = input.parentElement;\n        if (!$editor) {\n            throw new Error();\n        }\n\n        const selectionWidth = end.left - start.left;\n        let left = start.left - parent.left - (target.width - selectionWidth) / 2;\n        const top = start.bottom - parent.top + 14 + $editor.scrollTop;\n\n        if (left < 0) left = 0;\n\n        return [top, left];\n    });\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { css } from '@emotion/css';\nimport { ThemeTool } from '@milkdown/core';\n\nexport const injectStyle = (themeTool: ThemeTool) => {\n    const { palette, mixin, size } = themeTool;\n\n    return css`\n        ${mixin.border?.()};\n        ${mixin.shadow?.()};\n\n        display: inline-flex;\n        justify-content: space-between;\n        align-items: center;\n        position: absolute;\n        background: ${palette('surface')};\n        border-radius: ${size.radius};\n        font-size: 1rem;\n\n        height: 3.5rem;\n        box-sizing: border-box;\n        width: 25.5rem;\n        padding: 0 1rem;\n        gap: 1rem;\n        z-index: 2;\n\n        input,\n        button {\n            all: unset;\n        }\n\n        input {\n            flex-grow: 1;\n            caret-color: ${palette('primary')};\n            &::placeholder {\n                color: ${palette('neutral', 0.6)};\n            }\n        }\n\n        button {\n            cursor: pointer;\n            height: 2.25rem;\n            color: ${palette('primary')};\n            font-size: 0.875rem;\n            padding: 0 0.5rem;\n            font-weight: 500;\n            letter-spacing: 1.25px;\n            &:hover {\n                background-color: ${palette('secondary', 0.12)};\n            }\n            &.disable {\n                color: ${palette('neutral', 0.38)};\n                cursor: not-allowed;\n                &:hover {\n                    background: transparent;\n                }\n            }\n            &.hide {\n                display: none;\n            }\n        }\n\n        &.hide {\n            display: none;\n        }\n    `;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Utils } from '@milkdown/utils';\n\nimport { injectStyle } from './style';\n\nexport const createInput = (utils: Utils) => {\n    const div = document.createElement('div');\n    const style = utils.getStyle(injectStyle);\n    if (style) {\n        div.classList.add(style);\n    }\n\n    div.classList.add('tooltip-input');\n\n    const input = document.createElement('input');\n    div.appendChild(input);\n    const button = document.createElement('button');\n    div.appendChild(button);\n\n    input.addEventListener('input', (e) => {\n        const { target } = e;\n        if (!(target instanceof HTMLInputElement)) {\n            return;\n        }\n\n        if (!target.value) {\n            button.classList.add('disable');\n            return;\n        }\n\n        button.classList.remove('disable');\n    });\n\n    return {\n        div,\n        input,\n        button,\n    } as const;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { EditorView } from '@milkdown/prose';\n\nimport type { InputMap } from '../item';\n\nexport const filterInput = (\n    currentView: EditorView,\n    inputMap: InputMap,\n    div: HTMLDivElement,\n    input: HTMLInputElement,\n    button: HTMLButtonElement,\n) => {\n    const target = Object.values(inputMap).find((input) => input.display(currentView));\n\n    if (!target) {\n        div.classList.add('hide');\n        return;\n    }\n\n    div.classList.remove('hide');\n\n    if (target.bind) {\n        button.classList.add('hide');\n    } else {\n        button.classList.remove('hide');\n        button.textContent = target.buttonText;\n    }\n\n    input.placeholder = target.placeholder;\n    target.update(currentView, div);\n\n    return target;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { EditorView } from '@milkdown/prose';\nimport { Utils } from '@milkdown/utils';\n\nimport type { Event2Command, InputMap } from '../item';\nimport { calcInputPos } from './calc-input-pos';\nimport { createInput } from './create-input';\nimport { filterInput } from './filter-input';\n\nexport const createInputManager = (inputMap: InputMap, utils: Utils) => {\n    let inputCommand: Event2Command | undefined;\n    let binding = false;\n    const setCommand = (x?: Event2Command) => (inputCommand = x);\n\n    const { div, button, input } = createInput(utils);\n\n    const onClick = (e: Event) => {\n        if (!inputCommand || button.classList.contains('disable')) return;\n\n        e.stopPropagation();\n        inputCommand(e);\n        div.classList.add('hide');\n    };\n    const onInput = (e: Event) => {\n        if (!binding || !inputCommand) return;\n        inputCommand(e);\n    };\n\n    input.addEventListener('input', onInput);\n    button.addEventListener('mousedown', onClick);\n\n    return {\n        destroy: () => {\n            input.removeEventListener('input', onInput);\n            div.removeEventListener('mousedown', onClick);\n            div.remove();\n        },\n        hide: () => {\n            div.classList.add('hide');\n            setCommand();\n        },\n        update: (editorView: EditorView) => {\n            const result = filterInput(editorView, inputMap, div, input, button);\n            if (!result) return;\n            binding = !!result.bind;\n            setCommand(result.command);\n            calcInputPos(editorView, div);\n        },\n        render: (editorView: EditorView) => {\n            const wrapper = editorView.dom.parentNode;\n            if (!wrapper) throw new Error();\n            wrapper.appendChild(div);\n        },\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { EditorState, EditorView } from '@milkdown/prose';\nimport { Utils } from '@milkdown/utils';\n\nimport { createButtonManager } from './button-manager';\nimport { createInputManager } from './input-manager';\nimport type { ButtonMap, InputMap } from './item';\n\nexport const createPlugin = (buttonMap: ButtonMap, inputMap: InputMap, utils: Utils) => {\n    const buttonManager = createButtonManager(buttonMap, utils);\n    const inputManager = createInputManager(inputMap, utils);\n    let shouldHide = false;\n\n    const hide = () => {\n        buttonManager.hide();\n        inputManager.hide();\n    };\n\n    const update = (view: EditorView, prevState?: EditorState) => {\n        const { state } = view;\n\n        if (!view.editable || shouldHide) {\n            hide();\n            return;\n        }\n\n        const isEqualSelection = prevState?.doc.eq(state.doc) && prevState.selection.eq(state.selection);\n        if (isEqualSelection) return;\n\n        buttonManager.update(view);\n        inputManager.update(view);\n    };\n\n    return {\n        update,\n        destroy: () => {\n            buttonManager.destroy();\n            inputManager.destroy();\n        },\n        render: (editorView: EditorView) => {\n            buttonManager.render(editorView);\n            inputManager.render(editorView);\n            update(editorView);\n        },\n        setHide: (isTyping: boolean) => {\n            shouldHide = isTyping;\n        },\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { schemaCtx } from '@milkdown/core';\nimport { Plugin, PluginKey } from '@milkdown/prose';\nimport { AtomList, createPlugin as create } from '@milkdown/utils';\n\nimport { buttonMap, inputMap, InputOptions } from './item';\nimport { createPlugin } from './selection-marks-tooltip';\n\nexport const key = new PluginKey('MILKDOWN_PLUGIN_TOOLTIP');\n\nexport const tooltipPlugin = create<string, InputOptions>((utils, options) => {\n    return {\n        id: 'tooltip',\n        prosePlugins: (_, ctx) => {\n            const schema = ctx.get(schemaCtx);\n            const manager = createPlugin(\n                buttonMap(schema, ctx),\n                inputMap(schema, ctx, {\n                    link: {\n                        placeholder: 'Input Web Link',\n                        buttonText: 'APPLY',\n                        ...(options?.link ?? {}),\n                    },\n                    image: {\n                        placeholder: 'Input Image Link',\n                        buttonText: 'APPLY',\n                        ...(options?.image ?? {}),\n                    },\n                    inlineMath: {\n                        placeholder: 'Input Math',\n                        ...(options?.inlineMath ?? {}),\n                    },\n                }),\n                utils,\n            );\n            const plugin = new Plugin({\n                key,\n                props: {\n                    handleKeyDown: () => {\n                        manager.setHide(true);\n                        return false;\n                    },\n                    handleClick: (view) => {\n                        manager.setHide(false);\n                        manager.update(view);\n                        return false;\n                    },\n                    handleDOMEvents: {\n                        mousedown: () => {\n                            manager.setHide(false);\n                            return false;\n                        },\n                    },\n                },\n                view: (editorView) => {\n                    manager.render(editorView);\n                    return {\n                        update: manager.update,\n                        destroy: manager.destroy,\n                    };\n                },\n            });\n            return [plugin];\n        },\n    };\n});\n\nexport const tooltip = AtomList.create([tooltipPlugin()]);\n"],"names":["injectStyle","create"],"mappings":"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"}